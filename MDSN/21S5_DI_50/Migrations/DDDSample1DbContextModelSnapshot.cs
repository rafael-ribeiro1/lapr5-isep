// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(DDDSample1DbContext))]
    partial class DDDSample1DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DDDSample1.Domain.ConnectionRequests.ConnectionRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("DestUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InAcceptance")
                        .HasColumnType("bit");

                    b.Property<string>("InterUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnApproval")
                        .HasColumnType("bit");

                    b.Property<string>("OrigUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.Connections.Connection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("DDDSample1.Domain.Mission.Mission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("DDDSample1.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DDDSample1.Domain.ConnectionRequests.ConnectionRequest", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.ConnectionRequests.RequestMessage", "MessageInterToDest", b1 =>
                        {
                            b1.Property<string>("ConnectionRequestId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Message")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConnectionRequestId");

                            b1.ToTable("ConnectionRequests");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionRequestId");
                        });

                    b.OwnsOne("DDDSample1.Domain.ConnectionRequests.RequestMessage", "MessageOrigToDest", b1 =>
                        {
                            b1.Property<string>("ConnectionRequestId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Message")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConnectionRequestId");

                            b1.ToTable("ConnectionRequests");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionRequestId");
                        });

                    b.OwnsOne("DDDSample1.Domain.ConnectionRequests.RequestMessage", "MessageOrigToInter", b1 =>
                        {
                            b1.Property<string>("ConnectionRequestId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Message")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConnectionRequestId");

                            b1.ToTable("ConnectionRequests");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionRequestId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Connections.ConnectionStrength", "ConnStrengthReq", b1 =>
                        {
                            b1.Property<string>("ConnectionRequestId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Strength")
                                .HasColumnType("int");

                            b1.HasKey("ConnectionRequestId");

                            b1.ToTable("ConnectionRequests");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionRequestId");
                        });

                    b.OwnsMany("DDDSample1.Domain.Users.Tag", "ConnTagsReq", b1 =>
                        {
                            b1.Property<string>("ConnectionRequestId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConnectionRequestId", "Id");

                            b1.ToTable("ConnectionRequests_ConnTagsReq");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionRequestId");
                        });

                    b.Navigation("ConnStrengthReq")
                        .IsRequired();

                    b.Navigation("ConnTagsReq");

                    b.Navigation("MessageInterToDest");

                    b.Navigation("MessageOrigToDest");

                    b.Navigation("MessageOrigToInter");
                });

            modelBuilder.Entity("DDDSample1.Domain.Connections.Connection", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.Connections.ConnectionStrength", "ConnectionStrength", b1 =>
                        {
                            b1.Property<string>("ConnectionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Strength")
                                .HasColumnType("int");

                            b1.HasKey("ConnectionId");

                            b1.ToTable("Connections");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Connections.RelationshipStrength", "RelationshipStrength", b1 =>
                        {
                            b1.Property<string>("ConnectionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Strength")
                                .HasColumnType("int");

                            b1.HasKey("ConnectionId");

                            b1.ToTable("Connections");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionId");
                        });

                    b.OwnsMany("DDDSample1.Domain.Users.Tag", "Tags", b1 =>
                        {
                            b1.Property<string>("ConnectionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ConnectionId", "Id");

                            b1.ToTable("Connections_Tags");

                            b1.WithOwner()
                                .HasForeignKey("ConnectionId");
                        });

                    b.Navigation("ConnectionStrength");

                    b.Navigation("RelationshipStrength");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DDDSample1.Domain.Mission.Mission", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.Mission.Difficulty", "Difficulty", b1 =>
                        {
                            b1.Property<string>("MissionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("DifficultyValue")
                                .HasColumnType("int");

                            b1.HasKey("MissionId");

                            b1.ToTable("Missions");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Mission.MissionDateTime", "DateTime", b1 =>
                        {
                            b1.Property<string>("MissionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("MissionId");

                            b1.ToTable("Missions");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Mission.MissionStatus", "CurrentStatus", b1 =>
                        {
                            b1.Property<string>("MissionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Status")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MissionId");

                            b1.ToTable("Missions");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });

                    b.Navigation("CurrentStatus");

                    b.Navigation("DateTime");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("DDDSample1.Domain.Users.User", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.Users.Avatar", "_Avatar", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_avatarUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.BirthDayDate", "_BirthDayDate", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_BirthDayDate")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.City", "_City", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_City")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.Country", "_Country", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Country")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.Email", "_Email", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Email")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UserId");

                            b1.HasIndex("_Email")
                                .IsUnique()
                                .HasFilter("[_Email__Email] IS NOT NULL");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.EmotionalState", "_EmotionalState", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("DDDSample1.Domain.Users.EmotionalStateCreationDate", "_creationDate", b2 =>
                                {
                                    b2.Property<string>("EmotionalStateUserId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("_CreationDate")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EmotionalStateUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("EmotionalStateUserId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Users.EmotionalValue", "Value", b2 =>
                                {
                                    b2.Property<string>("EmotionalStateUserId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<double>("_EmotionalValue")
                                        .HasColumnType("float");

                                    b2.HasKey("EmotionalStateUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("EmotionalStateUserId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Users.OCCEmotion", "Emotion", b2 =>
                                {
                                    b2.Property<string>("EmotionalStateUserId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("_Emotion")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EmotionalStateUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("EmotionalStateUserId");
                                });

                            b1.Navigation("_creationDate");

                            b1.Navigation("Emotion");

                            b1.Navigation("Value");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.FacebookProfile", "_FacebookLink", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_ProfileUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.LinkedInProfile", "_LinkedInLink", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_ProfileUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.Name", "_Name", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.Password", "_Password", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Password")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.Points", "_Points", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("_Points")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.ProfileDescription", "_ProfileDescription", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("DDDSample1.Domain.Users.Tag", "_InterestTags", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("Users__InterestTags");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Users.TelephoneNumber", "_TelephoneNumber", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("_Number")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("_Avatar");

                    b.Navigation("_BirthDayDate")
                        .IsRequired();

                    b.Navigation("_City");

                    b.Navigation("_Country");

                    b.Navigation("_Email")
                        .IsRequired();

                    b.Navigation("_EmotionalState");

                    b.Navigation("_FacebookLink");

                    b.Navigation("_InterestTags");

                    b.Navigation("_LinkedInLink");

                    b.Navigation("_Name")
                        .IsRequired();

                    b.Navigation("_Password")
                        .IsRequired();

                    b.Navigation("_Points");

                    b.Navigation("_ProfileDescription");

                    b.Navigation("_TelephoneNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
